name: $(GitVersion_NuGetVersion)

resources:
- repo: self
  fetchDepth: 15
  
variables:
  Build.Configuration: 'Release'
  Build.Platform: 'Any CPU'
  Parameters.solution: '**\*.sln'
  Parameters.feedRestore: 'dct-pkg'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: DCT
      demands:
      - IsBuildServer
      
    steps:        
    - task: DotNetCoreInstaller@2
      inputs:
        version: 3.1.x
      displayName: 'Use .NET Core sdk 3.1.x'

    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: GitVersion
      inputs:
        updateAssemblyInfo: true
        preferBundledVersion: false

    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet >=5.3.1'
      enabled: true
      inputs:
        versionSpec: '>=5.3.1'
    
    - task: NuGetCommand@2
      enabled: true
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(Parameters.solution)'
        vstsFeed: '$(Parameters.feedRestore)'

    - task: DotNetCoreCLI@2
      enabled: false
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**\*.csproj'
        vstsFeed: '$(Parameters.feedRestore)'
    #    includeNuGetOrg: false
    #    noCache: true    

#    - task: VSBuild@1
#      enabled: false
#      displayName: 'Build solution **\*.sln'
#      inputs:
#        solution: '$(Parameters.solution)'
#        msbuildArgs: '/p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
#        platform: '$(Build.Platform)'
#        configuration: '$(Build.Configuration)'
#        clean: true

    - task: MSBuild@1
      displayName: 'Build solution **/*.sln'
      inputs:
        msbuildVersion: 16.0
        msbuildArchitecture: x64
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'
        msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
        clean: true
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true
    
    - task: CopyFiles@2
      displayName: 'Copy NuGet Packages : Artifact NuGet Packages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\*.nupkg
         !**\*Interface*.nupkg
         !**\packages\**\*.nupkg
        TargetFolder: '$(build.artifactstagingdirectory)\NuGet'
        CleanTargetFolder: true
        flattenFolders: true
        
    - task: CopyFiles@2
      displayName: 'Copy NuGet Packages : Artifact NuGet Interface Packages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\*Interface*.nupkg
         !**\packages\**\*.nupkg
        TargetFolder: '$(build.artifactstagingdirectory)\NuGet Interface'
        CleanTargetFolder: true
        flattenFolders: true

    - task: VisualStudioTestPlatformInstaller@1
      displayName: 'Visual Studio Test Platform Installer'
      inputs:
        versionSelector: latestStable
      enabled: true
  
    - task: VSTest@2
      enabled: true
      displayName: 'VsTest - testAssemblies'
      inputs:
        testAssemblyVer2: |
         **\$(Build.Configuration)\*test*.dll
         !**\obj\**
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'

    # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
    - task: DotNetCoreCLI@2
      enabled: false
      displayName: Run .net Core Unit Tests
      inputs:
        command: test
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        nobuild: true
        projects: '**/*Tests.csproj'
    
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      enabled: false
      continueOnError: true
    
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**\bin\$(Build.Configuration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
      enabled: false
      condition: succeededOrFailed()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    